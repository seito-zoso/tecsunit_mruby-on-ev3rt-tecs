
celltype tTECSUnit {
    entry sTECSUnit eUnit;
    /*----- TECSInfo -----*/
    call nTECSInfo::sTECSInfo cTECSInfo;
    [dynamic,optional]
      call  nTECSInfo::sNamespaceInfo cNSInfo;
    [dynamic,optional]
      call  nTECSInfo::sRegionInfo    cRegionInfo;
    [dynamic,optional]
      call  nTECSInfo::sCellInfo      cCellInfo;
    [dynamic,optional]
      call  nTECSInfo::sSignatureInfo cSignatureInfo;
    [dynamic,optional]
      call  nTECSInfo::sCelltypeInfo  cCelltypeInfo;
    [dynamic,optional]
      call  nTECSInfo::sVarDeclInfo   cVarDeclInfo;
    [dynamic,optional]
      call  nTECSInfo::sTypeInfo      cTypeInfo;
    /*----- TECSInfo -----*/

    /*----- RawEntryDescriptor -----*/
    [dynamic,optional]
      call  nTECSInfo::sRawEntryDescriptorInfo   cREDInfo;
    [dynamic,optional]
      call  nTECSInfo::sEntryInfo     cEntryInfo;
    /*----- RawEntryDescriptor -----*/

    /*----- TECSUnit test -----*/
      /* プラグインにより自動生成される */
    [dynamic, optional]
      call ::siTask ciTask;
    [dynamic, optional]
      call ::sInitializeRoutineBody cInitializeRoutineBody;
    [dynamic, optional]
      call ::sTerminateRoutineBody cTerminateRoutineBody;
    [dynamic, optional]
      call ::siHandlerBody ciHandlerBody;
    [dynamic, optional]
      call ::sConfigInterrupt cConfigInterrupt;
    [dynamic, optional]
      call ::sCyclic cCyclic;
    [dynamic, optional]
      call ::sAlarm cAlarm;
    [dynamic, optional]
      call ::siAlarm ciAlarm;
    [dynamic, optional]
      call ::sFixedSizeMemoryPool cFixedSizeMemoryPool;
    [dynamic, optional]
      call ::sMessageBuffer cMessageBuffer;
    [dynamic, optional]
      call ::sMalloc cMalloc;
    [dynamic, optional]
      call ::sUltrasonicSensor cUltrasonicSensor;
    [dynamic, optional]
      call ::sColorSensor cColorSensor;
    [dynamic, optional]
      call ::sTouchSensor cTouchSensor;
    [dynamic, optional]
      call ::sGyroSensor cGyroSensor;
    [dynamic, optional]
      call ::sMotor cMotor;
    [dynamic, optional]
      call ::sButton cButton;
    [dynamic, optional]
      call ::sLCD cLCD;
    [dynamic, optional]
      call ::sLED cLED;
    [dynamic, optional]
      call ::sBattery cBattery;
    [dynamic, optional]
      call ::sSpeaker cSpeaker;
    [dynamic, optional]
      call ::sRiteVM cRiteVM;
    [dynamic, optional]
      call ::sBalancer cBalancer;
    [dynamic, optional]
      call ::sSharedMemory cSharedMemory;
    [dynamic, optional]
      call ::sTarget1 cTarget1;
    [dynamic, optional]
      call ::sTarget2 cTarget2;
    [dynamic, optional]
      call ::sTarget3 cTarget3;
    [dynamic, optional]
      call ::nMruby::sInitializeBridge cInitializeBridge;
    [dynamic, optional]
      call ::nMruby::sInitializeTECSBridge cInitializeTECSBridge;
    [dynamic, optional]
      call ::nMruby::sMrubyVM cMrubyVM;
    [dynamic, optional]
      call ::nPosix::sMain cMain;
    /*----- TECSUnit test -----*/

    attr {
      int16_t LEN = 256;
    };
    var {
      int32_t out_int[16][64];
      double64_t out_double[16][32];
      char_t out_char[16][256];
      [size_is(LEN)]
        char *cell_entry;
    };

};
